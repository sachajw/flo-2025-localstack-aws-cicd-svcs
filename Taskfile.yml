# LocalStack CI/CD Workshop - Taskfile
# Super simple commands to get started quickly
#
# Requirements: Install Task from https://taskfile.dev/installation/
# Usage: task <command>

version: '3'

vars:
  PYTHON: python3
  CONFIG_FILE: workshop_config.json
  GITHUB_TOKEN: '{{.CODEPIPELINE_GH_TOKEN}}'

tasks:
  # Main workflow tasks
  check:
    desc: "üîç Check if everything is ready to start"
    cmds:
      - "{{.PYTHON}} check_environment.py"

  setup-aws-profile:
    desc: "‚öôÔ∏è Setup AWS CLI profile for LocalStack"
    cmds:
      - echo "üîß Setting up AWS CLI profile for LocalStack..."
      - mkdir -p ~/.aws
      - |
        if [ -f ~/.aws/config ]; then
          if ! grep -q "\[profile localstack\]" ~/.aws/config; then
            echo "" >> ~/.aws/config
            echo "[profile localstack]" >> ~/.aws/config
            echo "region = us-east-1" >> ~/.aws/config
            echo "output = json" >> ~/.aws/config
            echo "endpoint_url = http://localhost:4566" >> ~/.aws/config
            echo "‚úÖ Added LocalStack profile to existing ~/.aws/config"
          else
            echo "‚ö†Ô∏è  LocalStack profile already exists in ~/.aws/config"
          fi
        else
          cp aws-config ~/.aws/config
          echo "‚úÖ Created ~/.aws/config with LocalStack profile"
        fi
      - |
        if [ -f ~/.aws/credentials ]; then
          if ! grep -q "\[localstack\]" ~/.aws/credentials; then
            echo "" >> ~/.aws/credentials
            echo "[localstack]" >> ~/.aws/credentials
            echo "aws_access_key_id = test" >> ~/.aws/credentials
            echo "aws_secret_access_key = test" >> ~/.aws/credentials
            echo "‚úÖ Added LocalStack credentials to existing ~/.aws/credentials"
          else
            echo "‚ö†Ô∏è  LocalStack credentials already exist in ~/.aws/credentials"
          fi
        else
          cp aws-credentials ~/.aws/credentials
          echo "‚úÖ Created ~/.aws/credentials with LocalStack profile"
        fi
      - echo "üéâ AWS CLI profile setup complete!"
      - echo "üí° You can now use aws --profile localstack for LocalStack commands"

  setup:
    desc: "üöÄ Setup the entire workshop (this does everything!)"
    deps: [check, setup-aws-profile]
    cmds:
      - "{{.PYTHON}} setup_workshop.py"

  demo:
    desc: "üé¨ Complete conference demo (check ‚Üí setup ‚Üí monitor ‚Üí packages ‚Üí browser)"
    cmds:
      - echo "üéØ Starting LocalStack CI/CD Demo..."
      - task: check
      - echo "‚úÖ Prerequisites checked"
      - task: setup
      - echo "üöÄ Workshop setup complete"
      - task: monitor
      - echo "üì¶ Checking published packages..."
      - task: packages
      - echo "üåê Opening browser demo..."
      - task: demo-s3
      - echo "üéâ Demo complete!"

  start:
    desc: "üèÅ Quick start - check, setup, and show status"
    cmds:
      - task: check
      - task: setup
      - task: status

  status:
    desc: "üìä Show current workshop status"
    cmds:
      - "{{.PYTHON}} monitor_pipeline.py --status-only"

  monitor:
    desc: "üëÄ Monitor the pipeline execution"
    cmds:
      - "{{.PYTHON}} monitor_pipeline.py"

  packages:
    desc: "üì¶ Check published packages in CodeArtifact"
    cmds:
      - "{{.PYTHON}} check_packages.py"

  logs:
    desc: "üìã View CodeBuild logs"
    cmds:
      - "{{.PYTHON}} view_logs.py"

  cleanup:
    desc: "üßπ Clean up all workshop resources"
    cmds:
      - "{{.PYTHON}} cleanup_workshop.py"

  # Utility tasks
  install-deps:
    desc: "üì• Install Python dependencies"
    cmds:
      - pip install awscli-local boto3 click rich

  install-task:
    desc: "‚öôÔ∏è Install Task runner (one-time setup)"
    cmds:
      - |
        if command -v brew >/dev/null 2>&1; then
          brew install go-task/tap/go-task
        elif command -v curl >/dev/null 2>&1; then
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin
        else
          echo "Please install Task manually from https://taskfile.dev/installation/"
        fi

  docker-start:
    desc: "üê≥ Start LocalStack Pro with Docker Compose"
    cmds:
      - |
        if [ -z "$LOCALSTACK_AUTH_TOKEN" ]; then
          echo "‚ùå LOCALSTACK_AUTH_TOKEN not set!"
          echo "Set it with: export LOCALSTACK_AUTH_TOKEN='your_api_key' or use .env file"
          exit 1
        fi
        mkdir -p volume
        docker compose up -d localstack

  docker-stop:
    desc: "üõë Stop LocalStack container"
    cmds:
      - docker compose down

  docker-logs:
    desc: "üì± View LocalStack container logs"
    cmds:
      - docker compose logs -f localstack

  docker-status:
    desc: "üìä Show LocalStack status"
    cmds:
      - docker compose ps localstack
      - echo "Health check:"
      - docker compose exec localstack curl -f http://localhost:4566/_localstack/health || echo "Not ready yet"

  # Configuration tasks
  config:
    desc: "‚öôÔ∏è Create/edit workshop configuration"
    cmds:
      - |
        if [ -f "{{.CONFIG_FILE}}" ]; then
          echo "Current config:"
          cat "{{.CONFIG_FILE}}"
        else
          echo "No config found"
        fi

  config-reset:
    desc: "üîÑ Reset configuration to defaults"
    cmds:
      - rm -f {{.CONFIG_FILE}}
      - echo "Configuration reset to defaults"

  # Pipeline operations
  pipeline-start:
    desc: "‚ñ∂Ô∏è Start pipeline execution manually"
    cmds:
      - AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test AWS_DEFAULT_REGION=us-east-1 aws --endpoint-url=http://localhost:4566 codepipeline start-pipeline-execution --name demo-pipeline

  pipeline-stop:
    desc: "‚èπÔ∏è Stop current pipeline execution"
    cmds:
      - echo "Stopping any running pipeline executions..."
      - |
        AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test AWS_DEFAULT_REGION=us-east-1 aws --endpoint-url=http://localhost:4566 codepipeline list-pipeline-executions --pipeline-name demo-pipeline --query 'pipelineExecutionSummaries[?status==`InProgress`].pipelineExecutionId' --output text | \
        xargs -I {} AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test AWS_DEFAULT_REGION=us-east-1 aws --endpoint-url=http://localhost:4566 codepipeline stop-pipeline-execution --pipeline-name demo-pipeline --pipeline-execution-id {} || echo "No running executions found"

  # npm package operations  
  npm-login:
    desc: "üîê Login to local npm registry"
    cmds:
      - AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test AWS_DEFAULT_REGION=us-east-1 aws --endpoint-url=http://localhost:4566 codeartifact login --tool npm --domain demo-domain --repository demo-repo

  npm-install:
    desc: "üì• Install published package locally"
    deps: [npm-login]
    cmds:
      - npm install localstack-workshop-demo

  npm-pack:
    desc: "üì¶ Download published package"
    deps: [npm-login]
    cmds:
      - npm pack localstack-workshop-demo

  demo-browser:
    desc: "üåê Open demo app in browser (local HTTP server)"
    cmds:
      - "{{.PYTHON}} serve_demo.py"

  demo-s3:
    desc: "üåê Open S3-hosted demo (after setup)"
    cmds:
      - echo "üåê Opening S3-hosted demo..."
      - |-
        if command -v open >/dev/null; then
          open "http://localhost:4566/demo-source-bucket/demo.html"
        elif command -v xdg-open >/dev/null; then
          xdg-open "http://localhost:4566/demo-source-bucket/demo.html"
        else
          echo "üì± Demo available at: http://localhost:4566/demo-source-bucket/demo.html"
          echo "üì± Or via S3 website: http://demo-source-bucket.s3-website.localhost.localstack.cloud:4566/demo.html"
        fi

  # Development helpers
  validate:
    desc: "‚úÖ Validate all resources are created correctly"
    cmds:
      - "{{.PYTHON}} validate_setup.py"

  debug:
    desc: "üêõ Show debug information"
    cmds:
      - echo "=== Docker Status ==="
      - docker ps | grep localstack || echo "LocalStack not running"
      - echo "=== AWS CLI Status ==="
      - awslocal sts get-caller-identity || echo "LocalStack not accessible"
      - echo "=== Environment ==="
      - |
        if [ -n "$CODEPIPELINE_GH_TOKEN" ]; then
          echo "CODEPIPELINE_GH_TOKEN: SET"
        else
          echo "CODEPIPELINE_GH_TOKEN: NOT SET"
        fi
      - |
        echo "Python: $(which python3)"
        echo "=== Files ==="
        ls -la *.py *.json templates/ 2>/dev/null || true

  # Workshop management
  fresh-start:
    desc: "üîÑ Complete fresh start (cleanup + setup)"
    cmds:
      - task: cleanup
      - sleep 5
      - task: setup

  quick-demo:
    desc: "üé¨ Quick demo run (for instructors)"
    cmds:
      - task: fresh-start
      - task: monitor
      - task: packages
      - task: npm-pack

  # Help and info
  help:
    desc: "‚ùì Show this help"
    cmds:
      - task --list

  workshop-info:
    desc: "üìñ Show workshop information"
    cmds:
      - |
        echo "üéØ LocalStack CI/CD Workshop"
        echo "==========================="
        echo ""
        echo "Quick Start:"
        echo "1. Set LocalStack Pro token:"
        echo "   cp .env.example .env  # Edit .env with your API key"
        echo "   OR: export LOCALSTACK_AUTH_TOKEN='your_api_key'"
        echo "2. Run: task demo"
        echo "3. Check packages: task packages"
        echo "4. Clean up: task cleanup"
        echo ""
        echo "LocalStack Pro offers a 14-day free trial!"
        echo "Get your API key: https://www.localstack.cloud/pricing"
        echo ""
        echo "Need help? Run: task help"

  # Default task
  default:
    desc: "üè† Default task - show workshop info and help"
    cmds:
      - task: workshop-info
      - echo ""
      - task: help

# Aliases for common commands
aliases:
  s: setup
  m: monitor
  c: cleanup
  p: packages
  l: logs
  h: help