# LocalStack CI/CD Workshop - Taskfile
# Super simple commands to get started quickly
#
# Requirements: Install Task from https://taskfile.dev/installation/
# Usage: task <command>

version: '3'

vars:
  PYTHON: python3
  CONFIG_FILE: workshop_config.json
  GITHUB_TOKEN: '{{.CODEPIPELINE_GH_TOKEN}}'

tasks:
  # Main workflow tasks
  check:
    desc: "🔍 Check if everything is ready to start"
    cmds:
      - "{{.PYTHON}} check_environment.py"

  setup:
    desc: "🚀 Setup the entire workshop (this does everything!)"
    deps: [check]
    cmds:
      - "{{.PYTHON}} setup_workshop.py"

  demo:
    desc: "🎬 Complete conference demo (check → setup → monitor → packages)"
    cmds:
      - echo "🎯 Starting LocalStack CI/CD Demo..."
      - task: check
      - echo "✅ Prerequisites checked"
      - task: setup
      - echo "🚀 Workshop setup complete"
      - task: monitor
      - echo "📦 Checking published packages..."
      - task: packages
      - echo "🎉 Demo complete!"

  start:
    desc: "🏁 Quick start - check, setup, and show status"
    cmds:
      - task: check
      - task: setup
      - task: status

  status:
    desc: "📊 Show current workshop status"
    cmds:
      - "{{.PYTHON}} monitor_pipeline.py --status-only"

  monitor:
    desc: "👀 Monitor the pipeline execution"
    cmds:
      - "{{.PYTHON}} monitor_pipeline.py"

  packages:
    desc: "📦 Check published packages in CodeArtifact"
    cmds:
      - "{{.PYTHON}} check_packages.py"

  logs:
    desc: "📋 View CodeBuild logs"
    cmds:
      - "{{.PYTHON}} view_logs.py"

  cleanup:
    desc: "🧹 Clean up all workshop resources"
    cmds:
      - "{{.PYTHON}} cleanup_workshop.py"

  # Utility tasks
  install-deps:
    desc: "📥 Install Python dependencies"
    cmds:
      - pip install awscli-local boto3 click rich

  install-task:
    desc: "⚙️ Install Task runner (one-time setup)"
    cmds:
      - |
        if command -v brew >/dev/null 2>&1; then
          brew install go-task/tap/go-task
        elif command -v curl >/dev/null 2>&1; then
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin
        else
          echo "Please install Task manually from https://taskfile.dev/installation/"
        fi

  docker-start:
    desc: "🐳 Start LocalStack container only"
    cmds:
      - |
        if [ -z "{{.GITHUB_TOKEN}}" ]; then
          echo "❌ CODEPIPELINE_GH_TOKEN not set!"
          echo "Set it with: export CODEPIPELINE_GH_TOKEN='your_token_here'"
          exit 1
        fi
        docker run --rm -d -p 4566:4566 \
          -e CODEPIPELINE_GH_TOKEN="{{.GITHUB_TOKEN}}" \
          -e DEBUG=1 \
          --name localstack-workshop \
          localstack/localstack

  docker-stop:
    desc: "🛑 Stop LocalStack container"
    cmds:
      - docker stop localstack-workshop 2>/dev/null || true
      - docker rm localstack-workshop 2>/dev/null || true

  docker-logs:
    desc: "📱 View LocalStack container logs"
    cmds:
      - docker logs -f localstack-workshop

  # Configuration tasks
  config:
    desc: "⚙️ Create/edit workshop configuration"
    cmds:
      - |
        if [ -f "{{.CONFIG_FILE}}" ]; then
          echo "Current config:"
          cat "{{.CONFIG_FILE}}"
        else
          echo "No config found"
        fi

  config-reset:
    desc: "🔄 Reset configuration to defaults"
    cmds:
      - rm -f {{.CONFIG_FILE}}
      - echo "Configuration reset to defaults"

  # Pipeline operations
  pipeline-start:
    desc: "▶️ Start pipeline execution manually"
    cmds:
      - awslocal codepipeline start-pipeline-execution --name demo-pipeline

  pipeline-stop:
    desc: "⏹️ Stop current pipeline execution"
    cmds:
      - echo "Stopping any running pipeline executions..."
      - |
        awslocal codepipeline list-pipeline-executions --pipeline-name demo-pipeline --query 'pipelineExecutionSummaries[?status==`InProgress`].pipelineExecutionId' --output text | \
        xargs -I {} awslocal codepipeline stop-pipeline-execution --pipeline-name demo-pipeline --pipeline-execution-id {} || echo "No running executions found"

  # npm package operations  
  npm-login:
    desc: "🔐 Login to local npm registry"
    cmds:
      - awslocal codeartifact login --tool npm --domain demo-domain --repository demo-repo

  npm-install:
    desc: "📥 Install published package locally"
    deps: [npm-login]
    cmds:
      - npm install my-lodash-fork

  npm-pack:
    desc: "📦 Download published package"
    deps: [npm-login]
    cmds:
      - npm pack my-lodash-fork

  # Development helpers
  validate:
    desc: "✅ Validate all resources are created correctly"
    cmds:
      - "{{.PYTHON}} validate_setup.py"

  debug:
    desc: "🐛 Show debug information"
    cmds:
      - echo "=== Docker Status ==="
      - docker ps | grep localstack || echo "LocalStack not running"
      - echo "=== AWS CLI Status ==="
      - awslocal sts get-caller-identity || echo "LocalStack not accessible"
      - echo "=== Environment ==="
      - |
        if [ -n "$CODEPIPELINE_GH_TOKEN" ]; then
          echo "CODEPIPELINE_GH_TOKEN: SET"
        else
          echo "CODEPIPELINE_GH_TOKEN: NOT SET"
        fi
      - |
        echo "Python: $(which python3)"
        echo "=== Files ==="
        ls -la *.py *.json templates/ 2>/dev/null || true

  # Workshop management
  fresh-start:
    desc: "🔄 Complete fresh start (cleanup + setup)"
    cmds:
      - task: cleanup
      - sleep 5
      - task: setup

  quick-demo:
    desc: "🎬 Quick demo run (for instructors)"
    cmds:
      - task: fresh-start
      - task: monitor
      - task: packages
      - task: npm-pack

  # Help and info
  help:
    desc: "❓ Show this help"
    cmds:
      - task --list

  workshop-info:
    desc: "📖 Show workshop information"
    cmds:
      - |
        echo "🎯 LocalStack CI/CD Workshop"
        echo "==========================="
        echo ""
        echo "Quick Start:"
        echo "1. Set GitHub token: export CODEPIPELINE_GH_TOKEN='your_token'"
        echo "2. Run: task start"
        echo "3. Monitor: task monitor"
        echo "4. Check packages: task packages"
        echo "5. Clean up: task cleanup"
        echo ""
        echo "Need help? Run: task help"

  # Default task
  default:
    desc: "🏠 Default task - show workshop info and help"
    cmds:
      - task: workshop-info
      - echo ""
      - task: help

# Aliases for common commands
aliases:
  s: setup
  m: monitor
  c: cleanup
  p: packages
  l: logs
  h: help